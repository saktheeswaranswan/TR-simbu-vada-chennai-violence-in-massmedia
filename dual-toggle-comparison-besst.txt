// === Multi-person Pose Viewer + Auto Compare (All Pairs) + Per-Person CSV (x,y,z) ===
// Upload 'tr-sulakarupan-adida.json' (required), optional video/head files.

const FPS = 30;
const POSE_W = 640, POSE_H = 480;
const EDGES = [
  [5,7],[7,9],[6,8],[8,10],
  [11,13],[13,15],[12,14],[14,16],
  [5,6],[11,12],[5,11],[6,12]
];

let app;

function preload(){
  app = new App('Hghdugfy.mp4', 'tr-sulakarupan-adida.json', 'head.png');
  app.preload();
}
function setup(){ createCanvas(1280,720); frameRate(FPS); app.setup(); }
function draw(){ app.tick(); }
function mousePressed(){ app.onMousePressed(); }
function mouseDragged(){ app.onMouseDragged(); }
function mouseReleased(){ app.onMouseReleased(); }
function keyPressed(){ app.onKey(key.toUpperCase()); }
function mouseWheel(e){ return true; }

// ---------------- App ----------------
class App {
  constructor(videoFile, poseJSONFile, headFile){
    this.videoFile = videoFile;
    this.poseJSONFile = poseJSONFile;
    this.headFile = headFile;

    // media
    this.video = null;
    this.headImg = null;
    this.videoReady = false;

    // json & parsed frames
    this.rawJSON = null;
    this.frameEntries = [];         // normalized sorted by frame_id
    this.poseMap = new Map();
    this.jsonReady = false;
    this.anyDrawReady = false;
    this.kpCount = 0;

    // playback/time
    this.t = 0;
    this.playing = false;
    this.rate = 1;

    // view / overlay
    this.scaleCycle = [1,0.75,0.5,0.25];
    this.scaleIdx = 0; this.scale = this.scaleCycle[this.scaleIdx];
    this.pointSizes = [6,12,18,24,36];
    this.ptIdx = 1; this.ptSize = this.pointSizes[this.ptIdx];
    this.offset = { x:0, y:0 };
    this.drag = { on:false, dx:0, dy:0 };
    this.showLabels = false;
    this.alpha = 200;

    // rose control
    this.roseEmoji = 'ðŸŒ¹';
    this.roseScale = 5;
    this.roseBasePx = 24;
    this.roseYOffset = 0.5;
    this.roseKeypoint = 10;
    this.roseOnAll = false;

    // connector / comparison features (manual view)
    this.showVideo = true;
    this.connectAll = false;
    this.pairA = [1,2];
    this.pairB = [3,4];
    this.similarity = { avgAngleDeg: null, avgLenRatio: null, validCount: 0, similarityPct: null };

    // auto compare (all pairs)
    this.autoMode = false;
    this.thresholdPct = 80;
    this.allPairs = [];          // list of [i,j] with i<j
    this.comparePlan = [];       // list of {A:[i,j], B:[k,l]} with canonical ordering to avoid duplicates
    this.planIdx = 0;            // current index into comparePlan
    this.autoBusy = false;       // avoid double exports same frame
    this.autoProgressText = '';
    this._lastExportStamp = 0;   // throttle

    // trails
    this.trails = {};
    this.showTrails = true;
    this.maxTrail = 240;
    this.trailAlpha = 160;
    this.trailWeight = 3;
    this.trailColors = [[0,200,255],[255,80,0],[0,255,120],[255,200,0],[180,120,255],[255,0,180]];
    this.trailSkip = 1;

    // caches
    this._vw = 0; this._vh = 0; this._scaleX = 1; this._scaleY = 1;
    this._lastPoseFrame = -1;

    // UI
    this.ui = new UI();
    this.param = { speed:1.0, alpha:this.alpha, tlen:this.maxTrail, twidth:this.trailWeight, start:0.0, dur:2.0 };

    // autoplay-safe init
    this.inited = false;
    this.initBtn = new UIButton(width/2 - 100, height/2 - 32, 200, 'Start / Init', ()=>this._userInit());
  }

  preload(){
    loadJSON(this.poseJSONFile, (data) => {
      this.rawJSON = data;
      const entries = Array.isArray(data) ? data : Object.values(data);
      this.frameEntries = [];
      for (let i = 0; i < entries.length; i++){
        const e = entries[i];
        const fid = Number(e.frame_id ?? e.frameId ?? e.frame);
        if (!Number.isFinite(fid)) continue;
        let persons = e.persons ?? e.keypoints ?? e.kpts;
        if (!persons) continue;
        if (!(Array.isArray(persons) && persons.length && Array.isArray(persons[0]) && Array.isArray(persons[0][0]))){
          persons = [persons];
        }
        // normalize: keep [x,y,z] but allow nulls
        const personsNorm = persons.map(ps => ps.map(p => (p && p.length ? p : null)));
        this.frameEntries.push({ frame_id: fid, persons: personsNorm, rawEntry: e });
        this.poseMap.set(fid, personsNorm);
        this._lastPoseFrame = max(this._lastPoseFrame, fid);
      }
      this.frameEntries.sort((a,b)=>a.frame_id - b.frame_id);
      // estimate keypoint count = max across first entry
      if (this.frameEntries.length){
        let m = 0;
        const ex = this.frameEntries[0].persons;
        for (let p=0;p<ex.length;p++) m = max(m, ex[p].length);
        this.kpCount = m;
      }
      // build all keypoint pairs (i<j)
      this._buildAllPairsAndPlan();
      this.jsonReady = true;
      this.anyDrawReady = true;
      console.log('Loaded JSON, frames:', this.frameEntries.length, 'lastFrame=', this._lastPoseFrame, 'kpCount=', this.kpCount, 'pairs=', this.allPairs.length, 'plan=', this.comparePlan.length);
    }, (err)=>{
      console.warn('Failed to load JSON:', err);
      this.rawJSON = null;
      this.jsonReady = false;
      this.anyDrawReady = false;
    });

    this.headImg = loadImage(this.headFile, ()=>{}, ()=>{ this.headImg = null; });
  }

  setup(){
    this.video = createVideo([this.videoFile], ()=>{
      this.video.hide();
      this.video.elt.muted = true;
      this.video.elt.playsInline = true;
      this.video.volume = 0;
      this.video.speed(this.rate);
      this.videoReady = true;
      console.log('Video element created (may still fail to load file).');
    }, (err)=>{
      console.warn('Video load failed:', err);
      this.videoReady = false;
    });

    this._buildUI();
  }

  _userInit(){
    this.inited = true;
    if (this.video && this.videoReady){
      try { this.video.loop(); this.video.speed(this.rate); } catch(e){}
    }
    this.playing = true;
  }

  _buildAllPairsAndPlan(){
    this.allPairs = [];
    for (let i=0;i<this.kpCount;i++){
      for (let j=i+1;j<this.kpCount;j++){
        this.allPairs.push([i,j]);
      }
    }
    // Build comparePlan of unordered pair-of-pairs without repetition:
    // For all pA in allPairs, for all pB after pA (index order), but ensure pairs don't share exact same tuple
    this.comparePlan = [];
    for (let ia=0; ia<this.allPairs.length; ia++){
      for (let ib=ia+1; ib<this.allPairs.length; ib++){
        const A = this.allPairs[ia], B = this.allPairs[ib];
        // allow overlapping keypoints across pairs â€” that's often desired â€” only exclude exact same pair
        this.comparePlan.push({A:[A[0],A[1]], B:[B[0],B[1]]});
      }
    }
    this.planIdx = 0;
  }

  tick(){
    background(18);

    if (!this.anyDrawReady){
      this._drawStatus('Waiting for pose JSONâ€¦ Add JSON to the project.');
      this.initBtn.draw();
      this.ui.draw();
      return;
    }

    if (this.playing){
      this.t += (deltaTime / 1000) * this.rate;
      if (this.video && this.videoReady){
        try {
          const vt = this.video.time();
          if (Math.abs(vt - this.t) > 0.1) this.t = vt;
          else this.video.time(this.t);
        } catch(e){}
      }
    }

    const aspect = POSE_W / POSE_H;
    this._vh = height;
    this._vw = this._vh * aspect;
    this._scaleX = this._vw / POSE_W;
    this._scaleY = this._vh / POSE_H;

    // video
    if (this.showVideo && this.video && this.videoReady && this.inited){
      image(this.video, 0, 0, this._vw, this._vh);
    } else {
      push(); noStroke(); fill(30); rect(0,0,this._vw,this._vh);
      fill(160); textAlign(CENTER,CENTER); textSize(16);
      text(this.videoReady ? 'Click "Start / Init" to play video' : 'No video â€” running in no-video mode', this._vw/2, this._vh/2);
      pop();
    }

    // trails and overlay
    if (this.showTrails) this._drawTrails();
    this._drawPose();

    // compute & draw similarity (manual view for current pairA/B)
    this._computeSimilarity();
    this._drawSimilarityOverlay();

    // auto compare runner
    this._autoCompareTick();

    if (this.videoReady && !this.inited) this.initBtn.draw();

    this.ui.draw();
  }

  _drawStatus(msg){ push(); fill(255); textAlign(CENTER,CENTER); textSize(18); text(msg, width/2, height/2 - 60); pop(); }

  _getDesiredFrameForTime(){ return Math.round(this.t * FPS); }

  _findEntryForFrame(frameNum){
    const arr = this.frameEntries;
    if (!arr.length) return null;
    let lo = 0, hi = arr.length - 1, best = null;
    while (lo <= hi){
      const mid = (lo + hi) >> 1;
      const fid = arr[mid].frame_id;
      if (fid === frameNum){ best = arr[mid]; break; }
      if (fid < frameNum){ best = arr[mid]; lo = mid + 1; }
      else { hi = mid - 1; }
    }
    return best || arr[0];
  }

  _getCurrentPersons(){
    const desired = this._getDesiredFrameForTime();
    const entry = this._findEntryForFrame(desired);
    return entry ? entry.persons : [];
  }

  _drawPose(){
    const persons = this._getCurrentPersons();
    const yOff = this.ptSize * this.roseYOffset;
    const lblSize = max(10, 14 / this.scale);

    push();
    translate(this.offset.x, this.offset.y);
    scale(this.scale);

    // bones
    stroke(255,255,0,this.alpha); strokeWeight(max(3, 4/this.scale)); noFill();
    for (let pi = 0; pi < persons.length; pi++){
      const k = persons[pi];
      for (let e = 0; e < EDGES.length; e++){
        const a = k[EDGES[e][0]], b = k[EDGES[e][1]];
        if (!a || !b) continue;
        line(a[0] * this._scaleX, a[1] * this._scaleY, b[0] * this._scaleX, b[1] * this._scaleY);
      }
    }

    // connect all (polyline)
    if (this.connectAll){
      for (let pi = 0; pi < persons.length; pi++){
        const k = persons[pi];
        strokeWeight(max(1, 2/this.scale));
        const c = this.trailColors[pi % this.trailColors.length];
        stroke(c[0], c[1], c[2], max(90,this.alpha/1.2));
        noFill();
        beginShape();
        for (let i = 0; i < k.length; i++){
          const pt = k[i];
          if (!pt) continue;
          vertex(pt[0] * this._scaleX, pt[1] * this._scaleY);
        }
        endShape();
      }
    }

    // joints + pair lines + rose
    for (let pi = 0; pi < persons.length; pi++){
      const k = persons[pi];
      const c = this.trailColors[pi % this.trailColors.length];
      noStroke(); fill(c[0], c[1], c[2], this.alpha);
      for (let i = 0; i < k.length; i++){
        const pt = k[i];
        if (!pt) continue;
        const x = pt[0] * this._scaleX, y = pt[1] * this._scaleY;
        ellipse(x, y, this.ptSize);
        if (this.showLabels){
          fill(255,255,255, max(90, this.alpha - 30));
          textSize(lblSize); text(i.toString(), x, y - this.ptSize);
          fill(c[0], c[1], c[2], this.alpha);
        }
        if (i === 0 && this.headImg){
          push(); imageMode(CENTER); tint(255, this.alpha);
          const hs = 100 * this.scale; image(this.headImg, x, y - hs/2, hs, hs); pop();
        }
      }

      // draw pair A and B
      const a0 = k[this.pairA[0]], a1 = k[this.pairA[1]];
      const b0 = k[this.pairB[0]], b1 = k[this.pairB[1]];
      strokeWeight(max(2, 3/this.scale));
      if (a0 && a1){
        stroke(0,200,255,220); line(a0[0]*this._scaleX, a0[1]*this._scaleY, a1[0]*this._scaleX, a1[1]*this._scaleY);
        noStroke(); fill(0,200,255,220); ellipse(a0[0]*this._scaleX, a0[1]*this._scaleY, this.ptSize/1.2); ellipse(a1[0]*this._scaleX, a1[1]*this._scaleY, this.ptSize/1.2);
      }
      if (b0 && b1){
        stroke(255,140,50,220); line(b0[0]*this._scaleX, b0[1]*this._scaleY, b1[0]*this._scaleX, b1[1]*this._scaleY);
        noStroke(); fill(255,140,50,220); ellipse(b0[0]*this._scaleX, b0[1]*this._scaleY, this.ptSize/1.2); ellipse(b1[0]*this._scaleX, b1[1]*this._scaleY, this.ptSize/1.2);
      }

      // rose
      if (this.roseOnAll){
        const kp = k[this.roseKeypoint];
        if (kp){
          const rx = kp[0] * this._scaleX, ry = kp[1] * this._scaleY;
          push(); textAlign(CENTER, CENTER); textSize(this.roseBasePx * this.roseScale); fill(255,255,255,this.alpha);
          text(this.roseEmoji, rx, ry - (this.ptSize * this.roseYOffset)); pop();
        }
      }
    }

    pop();

    // update trails using nearest entry
    const desired = this._getDesiredFrameForTime();
    const entry = this._findEntryForFrame(desired);
    const entryPersons = entry ? entry.persons : [];
    this._updateTrails(entry ? entry.frame_id : desired, entryPersons);
  }

  _computeSimilarity(){
    const desired = this._getDesiredFrameForTime();
    const entry = this._findEntryForFrame(desired);
    if (!entry){ this.similarity = { avgAngleDeg: null, avgLenRatio: null, validCount: 0, similarityPct: null }; return; }
    const persons = entry.persons;
    let angles = [], ratios = [], valid = 0;
    for (let p = 0; p < persons.length; p++){
      const k = persons[p];
      const a0 = k[this.pairA[0]], a1 = k[this.pairA[1]];
      const b0 = k[this.pairB[0]], b1 = k[this.pairB[1]];
      if (!a0 || !a1 || !b0 || !b1) continue;
      const vA = [a1[0]-a0[0], a1[1]-a0[1]];
      const vB = [b1[0]-b0[0], b1[1]-b0[1]];
      const na = Math.hypot(vA[0], vA[1]); const nb = Math.hypot(vB[0], vB[1]);
      if (na < 1e-6 || nb < 1e-6) continue;
      const dot = vA[0]*vB[0] + vA[1]*vB[1];
      const cosv = constrain(dot / (na*nb), -1, 1);
      const angle = Math.acos(cosv) * (180/Math.PI);
      angles.push(angle); ratios.push(na/nb); valid++;
    }
    if (valid === 0) { this.similarity = { avgAngleDeg: null, avgLenRatio: null, validCount: 0, similarityPct: null }; return; }
    const avgAngle = angles.reduce((s,v)=>s+v,0)/angles.length;
    const avgRatio = ratios.reduce((s,v)=>s+v,0)/ratios.length;
    const angleSim = max(0, 1 - (avgAngle / 180)) * 100; // 0..100
    const ratioDiff = Math.min(Math.abs(1 - avgRatio), 1);
    const ratioSim = max(0, 1 - ratioDiff) * 100; // 0..100
    const combined = (angleSim + ratioSim) / 2;
    this.similarity = { avgAngleDeg: avgAngle, avgLenRatio: avgRatio, validCount: valid, similarityPct: combined };
  }

  _drawSimilarityOverlay(){
    push();
    const pad = 10;
    const x = 8, y = 8;
    fill(0,0,0,160); rect(x, y, 420, 124, 6);
    fill(220); textAlign(LEFT, TOP); textSize(12);
    text(`Frame: ${this._getDesiredFrameForTime()}    Threshold: ${this.thresholdPct}%`, x + pad, y + pad);
    text(`Pair A: ${this.pairA[0]} -> ${this.pairA[1]}    Pair B: ${this.pairB[0]} -> ${this.pairB[1]}`, x + pad, y + pad + 16);
    if (this.similarity.validCount === 0){
      fill(200); text('No valid persons with both pairs', x + pad, y + pad + 40);
    } else {
      fill(180,255,180); text(`Avg angle: ${this.similarity.avgAngleDeg.toFixed(1)}Â°`, x + pad, y + pad + 40);
      fill(200,220); text(`Avg len ratio A/B: ${this.similarity.avgLenRatio.toFixed(2)} (n=${this.similarity.validCount})`, x + pad, y + pad + 58);
      fill(255,220,180); text(`Similarity: ${this.similarity.similarityPct.toFixed(1)}%`, x + pad + 260, y + pad + 58);
    }
    fill(200); textSize(11);
    text(`Auto: ${this.autoMode ? 'RUNNING' : 'OFF'}  |  Plan ${min(this.planIdx+1,this.comparePlan.length)}/${this.comparePlan.length}  |  ${this.autoProgressText}`, x + pad, y + pad + 86);
    pop();
  }

  // ---------------- Auto compare runner ----------------
  _autoCompareTick(){
    if (!this.autoMode || this.autoBusy || !this.jsonReady) return;
    if (this.comparePlan.length === 0) return;

    // If we've reached end, loop again starting from next unused (here: restart fully)
    if (this.planIdx >= this.comparePlan.length){
      this.planIdx = 0; // loop
    }

    // Throttle exports (avoid multiple save dialogs in one draw)
    const now = millis();
    if (now - this._lastExportStamp < 300) return;

    const job = this.comparePlan[this.planIdx];
    // Set visible pairs (for overlay/lines)
    this.pairA = job.A.slice();
    this.pairB = job.B.slice();

    // Export full-timeline CSV for this job
    this.autoBusy = true;
    this.autoProgressText = `Exporting A=${this.pairA.join('-')} vs B=${this.pairB.join('-')}â€¦`;
    const startSec = 0;
    const durationSec = (this._lastPoseFrame + 1) / FPS;
    // main per-person CSV with x,y,z + metrics
    this.saveCSVForPairs(this.pairA, this.pairB, startSec, durationSec);
    // hit log CSV for threshold
    this.saveHitLogForPairs(this.pairA, this.pairB, startSec, durationSec, this.thresholdPct);

    this._lastExportStamp = millis();
    // move to next job after a tick
    this.planIdx++;
    this.autoBusy = false;

    // Update progress text
    this.autoProgressText = `Done ${this.planIdx}/${this.comparePlan.length}`;
  }

  // ---------------- per-person CSV with coordinates & metrics ----------------
  saveCSVForPairs(pairA, pairB, startSec=0, durationSec=null){
    if (!this.jsonReady) return;
    startSec = max(0, Number(startSec) || 0);
    if (durationSec == null) durationSec = (this._lastPoseFrame + 1)/FPS;
    durationSec = max(0, Number(durationSec) || 0.001);
    const startF = max(0, floor(startSec * FPS));
    const endFExcl = min(floor((startSec + durationSec) * FPS), this._lastPoseFrame + 1);
    const lines = [];
    const header = [
      'frame_id','time_sec','person_index',
      'A0_x','A0_y','A0_z','A1_x','A1_y','A1_z',
      'B0_x','B0_y','B0_z','B1_x','B1_y','B1_z',
      'angle_deg','len_ratio','similarity_pct'
    ].join(',');
    lines.push(header);

    for (let f = startF; f < endFExcl; f++){
      const entry = this._findEntryForFrame(f);
      if (!entry) continue;
      const persons = entry.persons;
      const tsec = ((f - startF) / FPS).toFixed(3);

      for (let p = 0; p < persons.length; p++){
        const k = persons[p];
        const a0 = k[pairA[0]], a1 = k[pairA[1]];
        const b0 = k[pairB[0]], b1 = k[pairB[1]];

        let ax0='',ay0='',az0='', ax1='',ay1='',az1='', bx0='',by0='',bz0='', bx1='',by1='',bz1='';
        let angle='', ratio='', sim='';

        if (a0 && a1 && b0 && b1){
          ax0 = (a0[0]??''); ay0 = (a0[1]??''); az0 = (a0[2]??1);
          ax1 = (a1[0]??''); ay1 = (a1[1]??''); az1 = (a1[2]??1);
          bx0 = (b0[0]??''); by0 = (b0[1]??''); bz0 = (b0[2]??1);
          bx1 = (b1[0]??''); by1 = (b1[1]??''); bz1 = (b1[2]??1);

          const vA = [ax1-ax0, ay1-ay0];
          const vB = [bx1-bx0, by1-by0];
          const na = Math.hypot(vA[0], vA[1]);
          const nb = Math.hypot(vB[0], vB[1]);
          if (na >= 1e-6 && nb >= 1e-6){
            const dot = vA[0]*vB[0] + vA[1]*vB[1];
            const cosv = constrain(dot / (na*nb), -1, 1);
            const ang = Math.acos(cosv) * (180/Math.PI);
            const rat = na/nb;
            const angSim = max(0, 1 - (ang / 180)) * 100;
            const ratSim = max(0, 1 - Math.min(Math.abs(1 - rat), 1)) * 100;
            const comb = (angSim + ratSim) / 2;
            angle = ang.toFixed(4);
            ratio = rat.toFixed(4);
            sim   = comb.toFixed(4);
          }
        }

        lines.push([
          f, tsec, p,
          ax0,ay0,az0, ax1,ay1,az1,
          bx0,by0,bz0, bx1,by1,bz1,
          angle, ratio, sim
        ].join(','));
      }
    }

    const tagA = `${pairA[0]}-${pairA[1]}`;
    const tagB = `${pairB[0]}-${pairB[1]}`;
    saveStrings(lines, `compare_${tagA}_vs_${tagB}_perperson.csv`);
  }

  // ---------------- hit log CSV (frames exceeding threshold) ----------------
  saveHitLogForPairs(pairA, pairB, startSec=0, durationSec=null, thresholdPct=80){
    if (!this.jsonReady) return;
    startSec = max(0, Number(startSec) || 0);
    if (durationSec == null) durationSec = (this._lastPoseFrame + 1)/FPS;
    durationSec = max(0, Number(durationSec) || 0.001);
    const startF = max(0, floor(startSec * FPS));
    const endFExcl = min(floor((startSec + durationSec) * FPS), this._lastPoseFrame + 1);
    const lines = [];
    lines.push('frame_id,time_sec,avg_angle_deg,avg_len_ratio,similarity_pct,valid_count');

    for (let f = startF; f < endFExcl; f++){
      const entry = this._findEntryForFrame(f);
      const sim = this._computeSimilarityForEntryWithPairs(entry, pairA, pairB);
      if (sim.validCount > 0 && sim.similarityPct >= thresholdPct){
        const timeSec = ((f - startF) / FPS).toFixed(3);
        lines.push([
          f,
          timeSec,
          sim.avgAngleDeg.toFixed(4),
          sim.avgLenRatio.toFixed(4),
          sim.similarityPct.toFixed(4),
          sim.validCount
        ].join(','));
      }
    }
    const tagA = `${pairA[0]}-${pairA[1]}`;
    const tagB = `${pairB[0]}-${pairB[1]}`;
    saveStrings(lines, `hits_${tagA}_vs_${tagB}_thr${thresholdPct}.csv`);
  }

  _computeSimilarityForEntryWithPairs(entry, pairA, pairB){
    if (!entry) return { avgAngleDeg: null, avgLenRatio: null, validCount: 0, similarityPct: null };
    const persons = entry.persons;
    let angles = [], ratios = [], valid = 0;
    for (let p = 0; p < persons.length; p++){
      const k = persons[p];
      const a0 = k[pairA[0]], a1 = k[pairA[1]];
      const b0 = k[pairB[0]], b1 = k[pairB[1]];
      if (!a0 || !a1 || !b0 || !b1) continue;
      const vA = [(a1[0]-a0[0]), (a1[1]-a0[1])];
      const vB = [(b1[0]-b0[0]), (b1[1]-b0[1])];
      const na = Math.hypot(vA[0], vA[1]); const nb = Math.hypot(vB[0], vB[1]);
      if (na < 1e-6 || nb < 1e-6) continue;
      const dot = vA[0]*vB[0] + vA[1]*vB[1];
      const cosv = constrain(dot / (na*nb), -1, 1);
      const angle = Math.acos(cosv) * (180/Math.PI);
      angles.push(angle);
      ratios.push(na/nb);
      valid++;
    }
    if (valid === 0) return { avgAngleDeg: null, avgLenRatio: null, validCount: 0, similarityPct: null };
    const avgAngle = angles.reduce((s,v)=>s+v,0)/angles.length;
    const avgRatio = ratios.reduce((s,v)=>s+v,0)/ratios.length;
    const angleSim = max(0, 1 - (avgAngle / 180)) * 100;
    const ratioDiff = Math.min(Math.abs(1 - avgRatio), 1);
    const ratioSim = max(0, 1 - ratioDiff) * 100;
    const combined = (angleSim + ratioSim) / 2;
    return { avgAngleDeg: avgAngle, avgLenRatio: avgRatio, validCount: valid, similarityPct: combined };
  }

  _updateTrails(frameIndex, persons){
    if ((frameIndex % this.trailSkip) !== 0) return;
    for (let pi = 0; pi < persons.length; pi++){
      if (!this.trails[pi]) this.trails[pi] = {};
      const k = persons[pi];
      for (let ki = 0; ki < k.length; ki++){
        const p = k[ki]; if (!p) continue;
        const arr = (this.trails[pi][ki] ||= []);
        arr.push({x: p[0], y: p[1]});
        if (arr.length > this.maxTrail) arr.shift();
      }
    }
  }

  _drawTrails(){
    push(); translate(this.offset.x, this.offset.y); scale(this.scale);
    const baseW = max(1.25, this.trailWeight / this.scale);
    for (const piStr in this.trails){
      const pi = Number(piStr);
      const [r,g,b] = this.trailColors[pi % this.trailColors.length];
      const parts = this.trails[pi];
      for (const kiStr in parts){
        const pts = parts[kiStr];
        if (!pts || pts.length < 2) continue;
        strokeWeight(baseW);
        for (let s = 1; s < pts.length; s++){
          const a = lerp(40, this.trailAlpha, s / pts.length);
          stroke(r, g, b, a);
          const p1 = pts[s-1], p2 = pts[s];
          line(p1.x * this._scaleX, p1.y * this._scaleY, p2.x * this._scaleX, p2.y * this._scaleY);
        }
      }
    }
    pop();
  }

  // ---------------- interaction / UI ----------------
  onKey(k){
    if (k === 'T') this.showTrails = !this.showTrails;
    if (k === 'P') (this.playing ? this.pause() : this.play());
    if (k === 'L') this.showLabels = !this.showLabels;
    if (k === 'C') this.trails = {};
    if (k === 'S') { this.param.start = +((this.t||0).toFixed(2)); this.ui.syncFrom(this); }
  }

  onMousePressed(){
    if (this.initBtn.contains(mouseX, mouseY)){ this.initBtn.mousePressed(); return; }
    if (this.ui.mousePressed()) return;

    // drag
    this.drag.on = true;
    this.drag.dx = mouseX - this.offset.x;
    this.drag.dy = mouseY - this.offset.y;
  }

  onMouseDragged(){ if (!this.drag.on) return; this.offset.x = mouseX - this.drag.dx; this.offset.y = mouseY - this.drag.dy; }
  onMouseReleased(){ if (this.initBtn.down) this.initBtn.mouseReleased(); if (this.ui.mouseReleased()) return; this.drag.on = false; }

  _jumpToFrame(frameId){
    this.t = frameId / FPS;
    if (this.video && this.videoReady){
      try { this.video.time(this.t); } catch(e){}
    }
  }

  play(){ this.playing = true; if (this.video && this.videoReady) try { this.video.play(); this.video.speed(this.rate); } catch(e){} }
  pause(){ this.playing = false; if (this.video) try { this.video.pause(); } catch(e){} }
  stop(){ this.playing = false; this.t = 0; if (this.video) try { this.video.pause(); this.video.time(0); } catch(e){} }

  // build bottom UI (includes auto mode)
  _buildUI(){
    const y = height - 164;
    const row = (i)=> y + i * 36;
    const right = width - 12;

    this.ui.add(new UIButton(12, row(0), 64, 'Play', ()=>this.play()));
    this.ui.add(new UIButton(80, row(0), 64, 'Pause', ()=>this.pause()));
    this.ui.add(new UIButton(148,row(0),64,'Stop', ()=>this.stop()));
    this.ui.add(new UIButton(216,row(0),72,'Scale', ()=>{
      this.scaleIdx = (this.scaleIdx + 1) % this.scaleCycle.length;
      this.scale = this.scaleCycle[this.scaleIdx];
      this.ptIdx = (this.ptIdx + 1) % this.pointSizes.length;
      this.ptSize = this.pointSizes[this.ptIdx];
    }));
    this.ui.add(new UIButton(294,row(0),120,'Toggle Trails', ()=> this.showTrails = !this.showTrails));
    this.ui.add(new UIButton(420,row(0),120,'Clear Trails', ()=> { this.trails = {}; }));

    // video toggle + connect toggle
    this.ui.add(new UIButton(right - 78, row(0), 66, 'Video', ()=>{ this.showVideo = !this.showVideo; }));
    this.ui.add(new UIButton(right - 160, row(0), 92, 'Connect All', ()=>{ this.connectAll = !this.connectAll; }));

    // Auto mode buttons
    const startAuto = new UIButton(right - 400, row(0), 108, 'Start Auto', ()=>{
      if (!this.jsonReady) return;
      this.autoMode = true; this.autoProgressText = 'Startingâ€¦';
      this.planIdx = this.planIdx % this.comparePlan.length;
    });
    const stopAuto = new UIButton(right - 286, row(0), 96, 'Stop Auto', ()=>{
      this.autoMode = false; this.autoProgressText = 'Stopped';
    });
    this.ui.add(startAuto); this.ui.add(stopAuto);

    // rose toggle
    const roseBtn = new UIButton(right - 508, row(0), 100, `Rose:${this.roseKeypoint}`, ()=>{
      this.roseOnAll = !this.roseOnAll;
      roseBtn.label = this.roseOnAll ? `RoseOnAll` : `Rose:${this.roseKeypoint}`;
    });
    this.roseToggleButton = roseBtn;
    this.ui.add(roseBtn);

    // row 1 sliders
    this.ui.add(new UILabel(12,row(1),'Speed'));
    this.ui.add(new UISlider(70,row(1),200,0.25,2.0,this.param.speed,0.01,(v)=>{ this.param.speed=v; this.rate=v; if(this.video) this.video.speed(v); }));
    this.ui.add(new UILabel(280,row(1),'Alpha'));
    this.ui.add(new UISlider(336,row(1),200,0,255,this.param.alpha,1,(v)=>{ this.param.alpha=v; this.alpha=v|0; }));
    this.ui.add(new UILabel(560,row(1),'Trail Len'));
    this.ui.add(new UISlider(620,row(1),220,10,600,this.param.tlen,1,(v)=>{ this.param.tlen=v|0; this.maxTrail=v|0; }));
    this.ui.add(new UILabel(848,row(1),'Thick'));
    this.ui.add(new UISlider(898,row(1),150,1,8,this.param.twidth,0.5,(v)=>{ this.param.twidth=v; this.trailWeight=v; }));

    // row 2: manual pair steppers (for visual inspection)
    this.ui.add(new UILabel(12,row(2),'Pair A'));
    const a0 = new UIStepper(76,row(2),60,this.pairA[0],1,0,99,(v)=>{ this.pairA[0] = Math.max(0, Math.round(v)); });
    const a1 = new UIStepper(140,row(2),60,this.pairA[1],1,0,99,(v)=>{ this.pairA[1] = Math.max(0, Math.round(v)); });
    this.ui.add(a0); this.ui.add(a1);

    this.ui.add(new UILabel(220,row(2),'Pair B'));
    const b0 = new UIStepper(280,row(2),60,this.pairB[0],1,0,99,(v)=>{ this.pairB[0] = Math.max(0, Math.round(v)); });
    const b1 = new UIStepper(344,row(2),60,this.pairB[1],1,0,99,(v)=>{ this.pairB[1] = Math.max(0, Math.round(v)); });
    this.ui.add(b0); this.ui.add(b1);

    // threshold slider + Start=Now (for JSON range if you want)
    this.ui.add(new UILabel(12,row(3),'Threshold %'));
    this.ui.add(new UISlider(110,row(3),220,0,100,this.thresholdPct,1,(v)=>{ this.thresholdPct = Math.round(v); }));

    this.ui.add(new UIButton(360,row(3),110,'â†˜ Start=Now', ()=>{ this.param.start = +((this.t||0).toFixed(2)); this.ui.syncFrom(this); }));

    // JSON exports (manual)
    this.ui.add(new UIButton(right-420,row(2),120,'Save 0â€“2s JSON', ()=> this.saveWindowJSON(0,2)));
    this.ui.add(new UIButton(right-294,row(2),120,'Save 0â€“5s JSON', ()=> this.saveWindowJSON(0,5)));
    this.ui.add(new UIButton(right-168,row(2),156,'Save Range JSON', ()=> this.saveWindowJSON(this.param.start, this.param.dur)));
  }
}

// ---------------- helpers for similarity timeline (manual hits CSV if needed) ----------------
App.prototype._computeSimilarityForEntry = function(entry){
  return this._computeSimilarityForEntryWithPairs(entry, this.pairA, this.pairB);
};

// ---------------- Canvas UI primitives ----------------
class UI { constructor(){ this.items=[]; this._active=null; } add(w){ this.items.push(w); w.ui=this; return w; } draw(){ for(const w of this.items) w.draw(); } mousePressed(){ for(let i=this.items.length-1;i>=0;i--){ const w=this.items[i]; if(w.mousePressed && w.contains(mouseX,mouseY)){ this._active=w; w.mousePressed(); return true; } } return false; } mouseDragged(){ if(this._active && this._active.mouseDragged) this._active.mouseDragged(); } mouseReleased(){ if(this._active && this._active.mouseReleased) this._active.mouseReleased(); this._active=null; return true; } syncFrom(app){ for(const w of this.items) if(w.syncFrom) w.syncFrom(app); } }

class UILabel { constructor(x,y,text){ this.x=x; this.y=y; this.text=text; this.h=24; } contains(){ return false; } draw(){ push(); noStroke(); fill(220); textSize(14); textAlign(LEFT,CENTER); text(this.text,this.x,this.y+12); pop(); } }

class UIButton {
  constructor(x,y,w,label,onClick){ this.x=x; this.y=y; this.w=w; this.h=28; this.label=label; this.onClick=onClick; this.down=false; }
  contains(px,py){ return px>=this.x && px<=this.x+this.w && py>=this.y && py<=this.y+this.h; }
  draw(){ const hover=this.contains(mouseX,mouseY); push(); noStroke(); fill(this.down?30:(hover?50:35)); rect(this.x,this.y,this.w,this.h,8); stroke(255,140); noFill(); rect(this.x,this.y,this.w,this.h,8); noStroke(); fill(255); textAlign(CENTER,CENTER); textSize(13); text(this.label,this.x+this.w/2,this.y+this.h/2); pop(); }
  mousePressed(){ this.down=true; }
  mouseReleased(){ if(this.down && this.contains(mouseX,mouseY) && this.onClick) this.onClick(); this.down=false; }
}

class UISlider {
  constructor(x,y,w,min,max,value,step,onChange){ this.x=x; this.y=y; this.w=w; this.h=24; this.min=min; this.max=max; this.value=value; this.step=step||0.01; this.onChange=onChange; this.grab=false; }
  contains(px,py){ return px>=this.x && px<=this.x+this.w && py>=this.y && py<=this.y+this.h; }
  _valToX(v){ return this.x + (this.w - 1) * ((v - this.min) / (this.max - this.min)); }
  _xToVal(px){ const t = constrain((px - this.x) / (this.w - 1), 0, 1); const v = this.min + t * (this.max - this.min); if (this.step > 0) return Math.round(v / this.step) * this.step; return v; }
  draw(){ push(); stroke(120); strokeWeight(2); line(this.x,this.y+this.h/2,this.x+this.w,this.y+this.h/2); const kx = this._valToX(this.value); noStroke(); fill(230); circle(kx, this.y+this.h/2, 12); noStroke(); fill(220); textAlign(LEFT,CENTER); textSize(12); text(this.value.toFixed((this.step>=1)?0:(this.step>=0.1?1:2)), this.x+this.w+8, this.y+this.h/2); pop(); }
  mousePressed(){ this.grab = true; this.value = this._xToVal(mouseX); if (this.onChange) this.onChange(this.value); }
  mouseDragged(){ if (!this.grab) return; this.value = this._xToVal(mouseX); if (this.onChange) this.onChange(this.value); }
  mouseReleased(){ this.grab = false; }
  syncFrom(){}
}

class UIStepper {
  constructor(x,y,w,value,step,min,max,onChange){ this.x=x; this.y=y; this.w=w; this.h=28; this.value=value; this.step=step||1; this.min=min??-Infinity; this.max=max??Infinity; this.onChange=onChange; this.btnW=28; this._dec=new UIButton(x,y,this.btnW,'â€“',()=>this._bump(-1)); this._inc=new UIButton(x+w-this.btnW,y,this.btnW,'+',()=>this._bump(+1)); }
  _bump(dir){ let v = this.value + dir * this.step; v = constrain(v, this.min, this.max); this.value = v; if (this.onChange) this.onChange(this.value); }
  contains(px,py){ return px>=this.x && px<=this.x+this.w && py>=this.y && py<=this.y+this.h; }
  draw(){ push(); noFill(); stroke(180,140); rect(this.x,this.y,this.w,this.h,6); noStroke(); fill(240); textAlign(CENTER,CENTER); textSize(13); text(this.value.toFixed(0), this.x+this.w/2, this.y+this.h/2); pop(); this._dec.draw(); this._inc.draw(); }
  mousePressed(){ if (this._dec.contains(mouseX,mouseY)) this._dec.mousePressed(); else if (this._inc.contains(mouseX,mouseY)) this._inc.mousePressed(); }
  mouseDragged(){}
  mouseReleased(){ if(this._dec.down) this._dec.mouseReleased(); if(this._inc.down) this._inc.mouseReleased(); }
  syncFrom(app){ const s=(this.onChange&&this.onChange.toString())||''; if (s.includes('param.start')) this.value = app.param.start; if (s.includes('param.dur')) this.value = app.param.dur; }
}
